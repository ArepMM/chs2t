//------------------------------------------------------------------------------
//
//      Магистральный пассажирский электровоз постоянного тока ЧС2т.
//      Дополнение для Russian Railway Simulator (RRS)
//
//      (c) RRS development team:
//          Дмитрий Притыкин (maisvendoo),
//          Николай Авилкин (avilkin.nick)
//
//      Дата: 21/08/2019
//
//------------------------------------------------------------------------------


#include "stepswitch.h"

//------------------------------------------------------------------------------
// Конструктор
//------------------------------------------------------------------------------
StepSwitch::StepSwitch(QObject* parent) : Device(parent)
  , V(2.96)
  , poz_d(0)
  , poz(0)
  , n(0)

{

}

//------------------------------------------------------------------------------
// Деструктор
//------------------------------------------------------------------------------
StepSwitch::~StepSwitch()
{

}

double StepSwitch::getSchemeState() const
{
    return static_cast<double>(poz != 0);
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void StepSwitch::ode_system(const state_vector_t& Y, state_vector_t& dYdt, double t)
{

}

//------------------------------------------------------------------------------
// Загрузка данных из конфигурационного файла
//------------------------------------------------------------------------------
void StepSwitch::load_config(CfgReader& cfg)
{

}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void StepSwitch::preStep(state_vector_t& Y, double t)
{

}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void StepSwitch::stepKeysControl(double t, double dt)
{
    if (ctrlState.up)
    {
        poz_d += V * hs_p(42 - poz_d) * dt;
        n = 0;
    }
    if (ctrlState.up1 && poz_d < 42 && n == 0)
    {
        poz += 1;
        poz_d = poz;
        n = 1;
    }
    if (ctrlState.down1 && poz_d > 0 && n == 0)
    {
        poz -= 1;
        poz_d = poz;
        n = 1;
    }
    if (ctrlState.down)
    {
        poz_d -= V * hs_p(poz_d) * dt;
        n = 0;
    }
    if (ctrlState.zero)
    {
        n = 0;
    }

    poz = static_cast<int>(poz_d);

}
